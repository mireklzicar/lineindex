name: PyPackage CI, Version Bump & Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test,compression]"
          if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi

      - name: Run tests
        run: pytest tests/

      - name: Lint with flake8
        run: |
          # Only run on one Python version to avoid duplicated reports
          if [ "${{ matrix.python-version }}" == "3.10" ]; then
            flake8 linex tests
          fi

  bump_version:
      needs: test
      runs-on: ubuntu-latest
      if: >-
        github.event_name == 'push' &&
        github.ref == 'refs/heads/main' &&
        !contains(github.event.head_commit.message, '[skip version bump]')
      steps:
        - uses: actions/checkout@v3
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            
        - name: Configure Git
          run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
        - name: Set up Python
          uses: actions/setup-python@v3
          with:
            python-version: "3.10"
            
        - name: Install bump2version
          run: pip install bump2version
            
        - name: Bump version (patch)
          run: bump2version patch

        - name: Push changes
          run: |
            git push
            git push --tags

  publish:
    needs: [test, bump_version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important for version history
          ref: main       # Explicitly checkout main
          
      - name: Pull latest changes
        run: |
          git pull origin main
          
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install publishing tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload --non-interactive dist/*